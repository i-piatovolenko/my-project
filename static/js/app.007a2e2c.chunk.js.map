{"version":3,"sources":["hooks/useColorScheme.ts","screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","lightColor","darkColor","otherProps","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","lineHeight","textAlign","TabOneScreen","separator","height","width","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","colorScheme","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","size","marginBottom","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","isLoadingComplete","React","setLoadingComplete","a","async","SplashScreen","Font","font","require","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"g0BAKe,SAASA,IACtB,OAAOC,c,qECAM,SAASC,EAAT,GAEuC,IADpDC,EACmD,EADnDA,WAEA,OACE,gBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,gBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,OAApB,8BACA,gBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAAMR,EAAWS,QAAQ,SAASP,MAAOC,EAAOO,MACzE,gBAACL,EAAA,EAAD,CAAMH,MAAOC,EAAOQ,UAApB,wBAMR,IAAMR,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,SAChBC,QAAS,IAEXZ,MAAO,CACLa,SAAU,GACVC,WAAY,QAEdV,KAAM,CACJW,UAAW,GACXC,gBAAiB,IAEnBX,SAAU,CACRQ,SAAU,GACVI,MAAO,a,0BClCI,GACbC,MAAO,CACLC,KAAM,OACNC,WAAY,OACZC,KAPmB,UAQnBC,eAAgB,OAChBC,gBATmB,WAWrBC,KAAM,CACJL,KAAM,OACNC,WAAY,OACZC,KAbkB,OAclBC,eAAgB,OAChBC,gBAfkB,S,oGCUf,SAASE,EACdC,EACAC,GAEA,IAAMC,EAAQrC,IACRsC,EAAiBH,EAAME,GAE7B,OAAIC,GAGKC,EAAOF,GAAOD,GAYlB,SAAS5B,EAAK2B,GACnB,IAAQ9B,EAAgD8B,EAAhD9B,MAAOmC,EAAyCL,EAAzCK,WAAYC,EAA6BN,EAA7BM,UAAcC,EAAzC,IAAwDP,EAAxD,GACMT,EAAQQ,EAAc,CAAEP,MAAOa,EAAYP,KAAMQ,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAapC,MAAO,CAAC,CAAEqB,SAASrB,IAAYqC,IAG9C,SAAStC,EAAK+B,GACnB,IAAQ9B,EAAgD8B,EAAhD9B,MAAOmC,EAAyCL,EAAzCK,WAAYC,EAA6BN,EAA7BM,UAAcC,EAAzC,IAAwDP,EAAxD,GACMjB,EAAkBgB,EAAc,CAAEP,MAAOa,EAAYP,KAAMQ,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAapC,MAAO,CAAC,CAAEa,mBAAmBb,IAAYqC,ICxCxD,SAASC,EAASR,GACvB,OAAO,gBAAC,EAAD,OAAUA,EAAV,CAAiB9B,MAAO,CAAC8B,EAAM9B,MAAO,CAAEuC,WAAY,kBCG9C,SAASC,EAAT,GAAqD,IAA3BC,EAA0B,EAA1BA,KACvC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMzC,MAAOC,EAAOyC,qBAClB,kBAAC,EAAD,CACE1C,MAAOC,EAAO0C,eACdR,WAAW,kBACXC,UAAU,yBAHZ,qCAOA,kBAAC,EAAD,CACEpC,MAAO,CAACC,EAAO2C,uBAAwB3C,EAAO4C,oBAC9CT,UAAU,yBACVD,WAAW,oBACX,kBAACG,EAAD,KAAWG,IAGb,kBAAC,EAAD,CACEzC,MAAOC,EAAO0C,eACdR,WAAW,kBACXC,UAAU,yBAHZ,mFAQF,kBAAC,EAAD,CAAMpC,MAAOC,EAAO6C,eAClB,kBAACzC,EAAA,EAAD,CAAkBC,QAASyC,EAAiB/C,MAAOC,EAAO+C,UACxD,kBAAC,EAAD,CAAMhD,MAAOC,EAAOgD,aAAcd,WAAYD,EAAOZ,MAAMG,MAA3D,6EASV,SAASsB,IACPG,IACE,0FAIJ,IAAMjD,EAASS,IAAWC,OAAO,CAC/B+B,oBAAqB,CACnB5B,WAAY,SACZqC,iBAAkB,IAEpBN,mBAAoB,CAClBO,eAAgB,GAElBR,uBAAwB,CACtBS,aAAc,EACdC,kBAAmB,GAErBX,eAAgB,CACd1B,SAAU,GACVsC,WAAY,GACZC,UAAW,UAEbV,cAAe,CACb3B,UAAW,GACXgC,iBAAkB,GAClBrC,WAAY,UAEdkC,SAAU,CACR5B,gBAAiB,IAEnB6B,aAAc,CACZO,UAAW,YCvEA,SAASC,IACtB,OACE,gBAAC,EAAD,CAAMzD,MAAOC,EAAOC,WAClB,gBAAC,EAAD,CAAMF,MAAOC,EAAOG,OAApB,WACA,gBAAC,EAAD,CAAMJ,MAAOC,EAAOyD,UAAWvB,WAAW,OAAOC,UAAU,0BAC3D,gBAACI,EAAD,CAAgBC,KAAK,+BAK3B,IAAMxC,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNE,WAAY,SACZC,eAAgB,UAElBX,MAAO,CACLa,SAAU,GACVC,WAAY,QAEdwC,UAAW,CACTN,eAAgB,GAChBO,OAAQ,EACRC,MAAO,SCvBI,SAASC,IACtB,OACE,gBAAC,EAAD,CAAM7D,MAAOC,EAAOC,WAClB,gBAAC,EAAD,CAAMF,MAAOC,EAAOG,OAApB,WACA,gBAAC,EAAD,CAAMJ,MAAOC,EAAOyD,UAAWvB,WAAW,OAAOC,UAAU,0BAC3D,gBAACI,EAAD,CAAgBC,KAAK,+BAK3B,IAAMxC,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNE,WAAY,SACZC,eAAgB,UAElBX,MAAO,CACLa,SAAU,GACVC,WAAY,QAEdwC,UAAW,CACTN,eAAgB,GAChBO,OAAQ,EACRC,MAAO,SCbLE,EAAYC,cAEH,SAASC,IACtB,IAAMC,EAActE,IAEpB,OACE,gBAACmE,EAAUI,UAAX,CACEC,iBAAiB,SACjBC,cAAe,CAAEC,gBAAiBnC,EAAO+B,GAAaxC,OACtD,gBAACqC,EAAUQ,OAAX,CACEC,KAAK,SACLC,UAAWC,GACXC,QAAS,CACPC,WAAY,gBAAGtD,EAAH,EAAGA,MAAH,OAAe,gBAACuD,EAAD,CAAYL,KAAK,WAAWlD,MAAOA,QAGlE,gBAACyC,EAAUQ,OAAX,CACEC,KAAK,SACLC,UAAWK,GACXH,QAAS,CACPC,WAAY,gBAAGtD,EAAH,EAAGA,MAAH,OAAe,gBAACuD,EAAD,CAAYL,KAAK,WAAWlD,MAAOA,SASxE,SAASuD,EAAW9C,GAClB,OAAO,gBAACgD,EAAA,EAAD,KAAUC,KAAM,GAAI/E,MAAO,CAAEgF,cAAe,IAASlD,IAK9D,IAAMmD,EAAcC,cAEpB,SAAST,KACP,OACE,gBAACQ,EAAYf,UAAb,KACE,gBAACe,EAAYX,OAAb,CACEC,KAAK,eACLC,UAAWf,EACXiB,QAAS,CAAES,YAAa,oBAMhC,IAAMC,GAAcF,cAEpB,SAASL,KACP,OACE,gBAACO,GAAYlB,UAAb,KACE,gBAACkB,GAAYd,OAAb,CACEC,KAAK,eACLC,UAAWX,EACXa,QAAS,CAAES,YAAa,oB,ICjEjB,IACbE,SAAU,C,OAACC,EAAgB,MAC3BC,OAAQ,CACNC,QAAS,CACPC,KAAM,CACJD,QAAS,CACPE,OAAQ,CACNF,QAAS,CACP/B,aAAc,QAGlBkC,OAAQ,CACNH,QAAS,CACP3B,aAAc,UAKtB+B,SAAU,OCXD,SAASC,GAAT,GAAwE,IAAlD5B,EAAiD,EAAjDA,YACnC,OACE,gBAAC6B,EAAA,EAAD,CACEC,QAASC,GACThE,MAAuB,SAAhBiC,EAAyBgC,IAAYC,KAC5C,gBAACC,GAAD,OAON,IAAMC,GAAQlB,cAEd,SAASiB,KACP,OACE,gBAACC,GAAMlC,UAAP,CAAiBmC,cAAe,CAAEC,aAAa,IAC7C,gBAACF,GAAM9B,OAAP,CAAcC,KAAK,OAAOC,UAAWR,IACrC,gBAACoC,GAAM9B,OAAP,CAAcC,KAAK,WAAWC,UAAW3E,EAAgB6E,QAAS,CAAEtE,MAAO,YCxBlE,SAASmG,KACtB,IAAMC,ECLO,WACb,MAAgDC,YAAe,GAA/D,WAAOD,EAAP,KAA0BE,EAA1B,KAyBA,OAtBAD,aAAgB,WACd,EAAAE,EAAAC,OAAA,gEAEIC,MAFJ,WAAAF,EAAA,MAKUG,IAAA,OACDhC,IAASiC,MADR,IAEJ,aAAcC,EAAQ,SAP5B,sDAWIC,QAAQC,KAAR,MAXJ,uBAaIR,GAAmB,GACnBG,MAdJ,mFAmBC,IAEIL,EDrBmBW,GACpBlD,EAActE,IAEpB,OAAK6G,EAID,kBAAC,IAAD,KACE,kBAACX,GAAD,CAAY5B,YAAaA,IACzB,kBAACmD,EAAA,EAAD,OALG,O,0DEdXC,EAAOC,QAAU,IAA0B,iC","file":"static/js/app.007a2e2c.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about createBottomTabNavigator:\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\n\nimport { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}